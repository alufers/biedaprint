package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"

	"github.com/iancoleman/strcase"
)

func loadCuraDefinition() (ret *CuraDefinition) {
	data, err := ioutil.ReadFile("CuraEngine/fdmprinter.def.json")
	if err != nil {
		panic(err)
	}

	err = json.Unmarshal(data, &ret)

	if err != nil {
		panic(err)
	}
	return
}

var generatedCode string = `
# Generated by gen_cura_settings_graphql.go DO NOT EDIT.

`
var generatedSettingsTypeBody string

func processSetting(setting *CuraDefinitionSetting, settingKey string) {
	gqlType := ""
	switch setting.Type {
	case "str":
		gqlType = "String!"
	case "int":
		gqlType = "Int!"
	case "float":
		gqlType = "Float!"
	}
	if gqlType != "" {
		generatedSettingsTypeBody += fmt.Sprintf("%v: %v\n", strcase.ToLowerCamel(settingKey), gqlType)
		generatedSettingsTypeBody += makeDirective("settingsField", map[string]string{
			"label":       makeStringLiteral(setting.Label),
			"description": makeStringLiteral(setting.Description),
			"page":        "CURA",
		}) + "\n\n"
	}
	for key, child := range setting.Children {
		processSetting(child, key)
	}
}

func main() {
	def := loadCuraDefinition()
	log.Printf("%+v", def)
	for _, cat := range def.Settings {
		for key, setting := range cat.Children {
			processSetting(setting, key)
		}
	}
	generatedCode += fmt.Sprintf(`
	
	type CuraSettings {
		%v
	}
	
	`, generatedSettingsTypeBody)
	fmt.Print(generatedCode)
}
