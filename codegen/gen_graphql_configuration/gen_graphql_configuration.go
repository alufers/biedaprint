package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"

	"github.com/pkg/errors"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

var gqlToEmit = `
# Code generated by codegen/gen_graphql_configuration, DO NOT EDIT.
`

func loadSourceFiles() (sources []*ast.Source, err error) {
	filenames, err := filepath.Glob("*.graphql")
	if err != nil {
		err = errors.Wrap(err, "failed to glob graphql schema files")
		return
	}
	sources = make([]*ast.Source, 0, len(filenames))
	for _, fname := range filenames {
		rawData, readFileErr := ioutil.ReadFile(fname)
		if readFileErr != nil {
			readFileErr = errors.Wrapf(readFileErr, "failed to read graphql schema file %s", fname)
			return
		}
		strData := string(rawData)
		src := &ast.Source{
			Name:  fname,
			Input: strData,
		}
		sources = append(sources, src)

	}
	return
}

func processGraphqlType(def *ast.Definition) {
	fieldDefs := ""
	for _, f := range def.Fields {
		if f.Directives.ForName("configurationField") != nil {
			if f.Type.String() == "Int!" || f.Type.String() == "String!" || f.Type.String() == "Float!" || f.Type.String() == "Boolean!" {
				fieldDefs += fmt.Sprintf("%s: ScalarConfigurationFieldDescriptor\n", f.Name)
			}
		}
	}
	gqlToEmit += fmt.Sprintf(`type %sDescriptor {
		%s
	}`, def.Name, fieldDefs)
}

func main() {
	sources, err := loadSourceFiles()
	if err != nil {
		panic(err)
	}
	schema, parseError := gqlparser.LoadSchema(sources...)
	if parseError != nil {
		log.Fatalf("failed to parse schema: %v", parseError.Message)
	}
	processGraphqlType(schema.Types["RootConfiguration"])
	err = ioutil.WriteFile("configuration_schema_generated.graphql", []byte(gqlToEmit), 0666)
	if err != nil {
		panic(err)
	}
}
