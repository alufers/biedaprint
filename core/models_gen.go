// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package core

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AvailableUpdate struct {
	TagName       string `json:"tagName"`
	CreatedAt     string `json:"createdAt"`
	Title         string `json:"title"`
	Body          string `json:"body"`
	ExecutableURL string `json:"ExecutableUrl"`
	Size          string `json:"size"`
}

type GcodeFileMeta struct {
	OriginalName      string             `json:"originalName"`
	GcodeFileName     string             `json:"gcodeFileName"`
	UploadDate        time.Time          `json:"uploadDate"`
	TotalLines        int                `json:"totalLines"`
	PrintTime         float64            `json:"printTime"`
	FilamentUsedMm    float64            `json:"filamentUsedMm"`
	LayerIndexes      []*GcodeLayerIndex `json:"layerIndexes"`
	HotendTemperature float64            `json:"hotendTemperature"`
	HotbedTemperature float64            `json:"hotbedTemperature"`
}

type GcodeLayerIndex struct {
	LineNumber  int `json:"lineNumber"`
	LayerNumber int `json:"layerNumber"`
}

type NewSettings struct {
	SerialPort           string                    `json:"serialPort"`
	BaudRate             int                       `json:"baudRate"`
	Parity               SerialParity              `json:"parity"`
	DataBits             int                       `json:"dataBits"`
	ScrollbackBufferSize int                       `json:"scrollbackBufferSize"`
	DataPath             string                    `json:"dataPath"`
	StartupCommand       string                    `json:"startupCommand"`
	TemperaturePresets   []*TemperaturePresetInput `json:"temperaturePresets"`
}

type PrintJob struct {
	GcodeMeta   *GcodeFileMeta `json:"gcodeMeta"`
	StartedTime time.Time      `json:"startedTime"`
}

type Settings struct {
	SerialPort           string               `json:"serialPort"`
	BaudRate             int                  `json:"baudRate"`
	ScrollbackBufferSize int                  `json:"scrollbackBufferSize"`
	DataPath             string               `json:"dataPath"`
	Parity               SerialParity         `json:"parity"`
	DataBits             int                  `json:"dataBits"`
	StartupCommand       string               `json:"startupCommand"`
	TemperaturePresets   []*TemperaturePreset `json:"temperaturePresets"`
}

type TemperaturePreset struct {
	Name              string  `json:"name"`
	HotendTemperature float64 `json:"hotendTemperature"`
	HotbedTemperature float64 `json:"hotbedTemperature"`
}

type TemperaturePresetInput struct {
	Name              string  `json:"name"`
	HotendTemperature float64 `json:"hotendTemperature"`
	HotbedTemperature float64 `json:"hotbedTemperature"`
}

type TrackedValue struct {
	Name              string                  `json:"name"`
	Unit              string                  `json:"unit"`
	DisplayType       TrackedValueDisplayType `json:"displayType"`
	PlotColor         string                  `json:"plotColor"`
	PlotDash          []float64               `json:"plotDash"`
	Value             interface{}             `json:"value"`
	LastUpdate        *time.Time              `json:"lastUpdate"`
	LastSent          *time.Time              `json:"lastSent"`
	MinUpdateInterval int                     `json:"minUpdateInterval"`
	History           []interface{}           `json:"history"`
	MaxHistoryLength  int                     `json:"maxHistoryLength"`
}

type SerialParity string

const (
	SerialParityEven SerialParity = "EVEN"
	SerialParityNone SerialParity = "NONE"
)

var AllSerialParity = []SerialParity{
	SerialParityEven,
	SerialParityNone,
}

func (e SerialParity) IsValid() bool {
	switch e {
	case SerialParityEven, SerialParityNone:
		return true
	}
	return false
}

func (e SerialParity) String() string {
	return string(e)
}

func (e *SerialParity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SerialParity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SerialParity", str)
	}
	return nil
}

func (e SerialParity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SettingsPage string

const (
	SettingsPageGeneral      SettingsPage = "GENERAL"
	SettingsPageSerialPort   SettingsPage = "SERIAL_PORT"
	SettingsPageTemperatures SettingsPage = "TEMPERATURES"
)

var AllSettingsPage = []SettingsPage{
	SettingsPageGeneral,
	SettingsPageSerialPort,
	SettingsPageTemperatures,
}

func (e SettingsPage) IsValid() bool {
	switch e {
	case SettingsPageGeneral, SettingsPageSerialPort, SettingsPageTemperatures:
		return true
	}
	return false
}

func (e SettingsPage) String() string {
	return string(e)
}

func (e *SettingsPage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SettingsPage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SettingsPage", str)
	}
	return nil
}

func (e SettingsPage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrackedValueDisplayType string

const (
	TrackedValueDisplayTypePlot    TrackedValueDisplayType = "PLOT"
	TrackedValueDisplayTypeTime    TrackedValueDisplayType = "TIME"
	TrackedValueDisplayTypeNumber  TrackedValueDisplayType = "NUMBER"
	TrackedValueDisplayTypeBoolean TrackedValueDisplayType = "BOOLEAN"
	TrackedValueDisplayTypeString  TrackedValueDisplayType = "STRING"
)

var AllTrackedValueDisplayType = []TrackedValueDisplayType{
	TrackedValueDisplayTypePlot,
	TrackedValueDisplayTypeTime,
	TrackedValueDisplayTypeNumber,
	TrackedValueDisplayTypeBoolean,
	TrackedValueDisplayTypeString,
}

func (e TrackedValueDisplayType) IsValid() bool {
	switch e {
	case TrackedValueDisplayTypePlot, TrackedValueDisplayTypeTime, TrackedValueDisplayTypeNumber, TrackedValueDisplayTypeBoolean, TrackedValueDisplayTypeString:
		return true
	}
	return false
}

func (e TrackedValueDisplayType) String() string {
	return string(e)
}

func (e *TrackedValueDisplayType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrackedValueDisplayType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrackedValueDisplayType", str)
	}
	return nil
}

func (e TrackedValueDisplayType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
